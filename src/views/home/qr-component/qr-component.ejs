<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QR Code</title>
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script>

    let intervalId;

    async function checkQRStatus() {
      try {
        const response = await fetch('/qr-status');
        const data = await response.json();
          const qrContainer = document.getElementById('qrContainer');
          const infoContainer = document.getElementById('infoContainer');

          if (data.clientReady) {
            qrContainer.style.display = 'none';
            infoContainer.style.display = 'block';
            infoContainer.innerHTML = `<p>Status: ready</p><p>Info: ${JSON.stringify(data.clientInfo)}</p>`;
            // clearInterval(intervalId); // Cancela el intervalo
          } else {
            qrContainer.style.display = 'block';
            infoContainer.style.display = 'none';
            qrContainer.innerHTML = `<img src="${data.qrCodeUrl}" alt="QR Code">`;
          }
      } catch (error) {
        console.error('Error fetching QR status:', error);
      };
    };

    // Iniciar cliente
    async function startClient() {
      try {
        const response = await fetch('/start-client');
        const data = await response.json();
        console.log('Client started:', data);
        showToast('success', 'Cliente iniciado');
      } catch (error) {
        showToast('error', 'Error al iniciar cliente');
        console.error('Error starting client:', error);
      };
    };

    // Detener cliente
    async function stopClient() {
      try {
        const response = await fetch('/stop-client');
        const data = await response.json();
        console.log('Client stopped:', data);
        showToast('success', 'Cliente detenido');
      } catch (error) {
        showToast('error', 'Error al detener cliente');
        console.error('Error stopping client:', error);
      };
    };

    // Resetea cliente
    async function resetClient() {
      try {
        const response = await fetch('/reset-client');
        const data = await response.json();
        console.log('Client reset:', data);
        showToast('success', 'Cliente reseteado');
      } catch (error) {
        showToast('error', 'Error al resetear cliente');
        console.error('Error resetting client:', error);
      };
    };

    intervalId = setInterval(checkQRStatus, 10000); // Polling cada 10 segundos

    // Toast
    function showToast(tipo , mensaje) {
      Toastify({
        text: mensaje,
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: tipo === 'success' ? "green" : "red"
      }).showToast();
    };

  </script>
</head>
<body onload="checkQRStatus()">
  <h1>CÃ³digo QR</h1>
  <div id="qrContainer" >
    <% if (qrCodeUrl && qrCodeUrl != ''  && !clientReady) { %>
      <img src="<%= qrCodeUrl %>" alt="QR Code">
    <% } %>

    <% if (!qrCodeUrl && !clientReady) { %>
      <span>Cargando...</span>
    <% } %>
  </div>
  <div id="infoContainer">
    <% if (clientReady) { %>
      <p>Status: ready</p>
      <p>Info: <%= JSON.stringify(clientInfo) %></p>
    <% } %>
  </div>

 
  <button onclick="startClient()">Iniciar cliente</button>
  <button onclick="stopClient()">Detener cliente</button>
  <button onclick="resetClient()">Resetear cliente</button>
  <!-- <% if (clientReady) { %> -->

  <!-- <% } %>  -->
  
</body>
</html>
